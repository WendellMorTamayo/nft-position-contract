import {
    addressFromValidator,
    AssetId,
    Bip32PrivateKey,
    HexBlob,
    Credential,
    blake2b_256,
    mnemonicToEntropy,
    NetworkId,
    PlutusV3Script,
    Script,
    TransactionId,
    TransactionInput,
    TransactionOutput,
    Value,
    wordlist,
    PolicyId,
    type TokenMap,
    AssetName,
    TransactionUnspentOutput,
    Datum,
    CredentialType,
} from "@blaze-cardano/core";
import { HotWallet, Blaze, Blockfrost, Data, type Static, Core } from "@blaze-cardano/sdk";

export const CollateralDetailSchema = Data.Object({
    PolicyId: Data.Bytes(),
    AssetName: Data.Bytes(),
    CollateralAmount: Data.Integer()
});

export type CollateralDatum = Static<typeof CollateralDetailSchema>;
export const CollateralDatum = CollateralDetailSchema as unknown as CollateralDatum;

export const NftPositionDatumSchema = Data.Object({
    Metadata: Data.Array(Data.Tuple(Data.Bytes()), { minItems: 2, maxItems: 2 }),
    Version: Data.Integer(),
    Extra: CollateralDetailSchema
});

export type NftPositionDatum = Static<typeof NftPositionDatumSchema>;
export const NftPositionDatum = NftPositionDatumSchema as unknown as NftPositionDatum;

const DatumTagSchema = Data.Object({
    tag: Data.Bytes(),
})
export type DatumTag = Static<typeof DatumTagSchema>;
export const DatumTag = DatumTagSchema as unknown as DatumTag

export const OrderRedeemerSchema = Data.Enum([
    Data.Object({ Accept: Data.Object({}) }),
    Data.Object({ Cancel: Data.Object({}) })
]);

export type OrderRedeemer = Static<typeof OrderRedeemerSchema>;
export const OrderRedeemer = OrderRedeemerSchema as unknown as OrderRedeemer;

//Prefix of the reference nft asset id according to CIP-68
const reference_prefix = "000643b0"

//Prefix of the nft asset id according to CIP-68
const user_nft_prefix = "000de140"


const validatorScript = Script.newPlutusV3Script(new PlutusV3Script(HexBlob.fromBytes(
    Buffer.from("59195201010029800aba4aba2aba1aba0aab9faab9eaab9dab9cab9a488888888a60022a66004921316578706563742063697036385f706f736974696f6e3a204e6674506f736974696f6e203d20696e6c696e655f646174756d00168a99801249466578706563742072657475726e5f646174756d3a20486173683c426c616b6532625f3235362c204f75747075745265666572656e63653e203d2072657475726e5f646174756d00168a998012492d657870656374206e66745f706f736974696f6e3a204e6674506f736974696f6e203d20696e7075745f6461746100168a9980124935657870656374206f75747075745f6e66745f706f736974696f6e3a204e6674506f736974696f6e203d206f75747075745f6461746100168a998012493365787065637420696e7075745f6e66745f706f736974696f6e3a204e6674506f736974696f6e203d20696e7075745f6461746100168a998012493865787065637420496e6c696e65446174756d28696e7075745f6461746129203d2073656c665f696e7075742e6f75747075742e646174756d00168a998012491a72656465656d65723a20576974686472617752656465656d6572001648888889660033001300b37540232232330010010032259800800c52f5c11332259800980280144cc04c008cc0100100062660080080028070c048004c04c00501048c03cc0400066e1d20029b87480026e9520004888888c8ca600260246ea8006602c0113016002488966002601000713232329800912cc00400629422b30013375e0066034603c00314a3133002002301f001406080e26eacc070c074c074c074c074c074c074c064dd5002cc070c07400d2223300300300219ba548008cc068dd4992cc004c028c060dd5000c4c966002601860326ea800626eb8c074c068dd5000c54cc0612414c657870656374205363726970742876616c696461746f725f6861736829203d2073656c665f696e7075742e6f75747075742e616464726573732e7061796d656e745f63726564656e7469616c0016405c603860326ea8c070c064dd51806180c9baa301c3019375400315330174913465787065637420536f6d652873656c665f696e70757429203d2073656c665f696e70757473207c3e206c6973742e6865616428290016405864b30010018a6103d87a8000898049980d980e000a5eb8101a198061bac301b30183754008466ebcc070c064dd500080125eb80c068004c058dd5002466002446466002002006446600600260040052232330010010032259800800c530103d87a80008992cc004c010006260166603a6e9c0052f5c1133003003301f00240606eb0c07400501b488c8cc00400400c896600200314c103d87a8000899192cc004cdc8802800c56600266e3c014006260186603c603800497ae08a60103d87a80004065133004004302000340646eb8c068004c07400501b4888c8cc004004010896600200310048994c004dd7180d800cdd6980e000ccc00c00cc080009004180f000a0389111919800800802112cc004006200913298009bae301b0019bab301c0019980180198100012008301e0014071223300c002232598009806180c9baa001899b8f003375c603a60346ea80062941017180e180c9baa301c301937540033700900148c068c06cc06c0064530014800290204c8cc004004cc06cdd4acc004c028c060dd50014522104000643b0008a4504000de14000405866036981094854657374696e675f003301b375200697ae02259800800c522100899b8a375c603a00266004004603c00280d9718911919800800801912cc00400629462b30013003301d001899801001180f000c528202e406d2232330010010032259800800c528456600260066eb0c0740062946266004004603c00280b901b4dc3a40089111111111114c00488966002602c60486ea800e264b300100180144c966002003003801c4cc89660020030058992cc00400600d00680344cc89660020030088992cc0040062b3001303100289980b803112cc00400a2b30013020302e375400713259800800c032264b3001001806c03601b00d899912cc00400601f13259800800c04202101080844cc89660020030128992cc004006027013809c4c966002607800701580a2072375a00301340f0607200281b8dd7000981c0012072303600140d06eb8004c0d40090361819800a062302f375400700b40b113259800800c03201913259800800c036264b3001001807403a01d00e899912cc00400602113259800800c046023011808c4c966002607400713008303a009809206e375c00281d0c0dc0050351bae001303600240dc60680028190dd6000c03201881a8c0c8009030402502e4026013009804a064302f00140b46eb4004c0b800a00c8178c0b000502a1bac001302b002801c00d02c1814800a04e3025375400700140892259800800c5200089804198010011814000a04a912cc0040062900044c020cc008008c0a00050254888c9660026030604a6ea80062900044dd6981498131baa001408c64b300130183025375400314c0103d87a8000899198008009bab302a3027375400444b30010018a6103d87a8000899192cc004cdc8803000c56600266e3c0180062603466058605400497ae08a60103d87a8000409d133004004302e003409c6eb8c0a0004c0ac00502920463300d00300248888cc88c966002601002d1325980080ac08204113233015001225980080144c966002603e605a6ea80062646602000a466446645300130370029111192cc004c0a8c0e0dd5000c4c966002605660726ea80062605466078607a60746ea8008cc0f0c0f4c0e8dd50009981e2cc004c0acc0e4dd500244cc01cdd6180e981d1baa003375a607a60746ea8012298103d87a800040dc97ae08a9981c24814865787065637420536f6d652873656c665f6f757470757429203d0a2020202074782e6f7574707574730a2020202020207c3e206c6973742e6174286f75747075745f696e64657829001640dc6600c6eb0c070c0e4dd5001002454cc0dd24014565787065637420536f6d652873656c665f696e70757429203d0a2020202074782e696e707574730a2020202020207c3e206c6973742e617428696e7075745f696e64657829001640d86600a6eb0c0ecc0e0dd50008024dd6981b8022444b30013028303637546074607600b13232332259800980d181d1baa0028992cc004006330010018acc004c0b4c0ecdd500144c8c966002603a607a6ea8006264b300100181d40ea07503a8acc005660026602e02205714a3153303d4911569735f6d696e745f76616c6964203f2046616c73650014a081e22b30015980099b8733223259800981998209baa00189bad30423233760608c002608c608e0026eb0c114c108dd5000c54cc1012401a265787065637420536f6d6528746f6b656e29203d0a20202020746f6b656e732876616c2c20706f6c6963795f6964290a2020202020207c3e20646963742e746f5f706169727328290a2020202020207c3e206c6973742e66696c74657228666e2850616972286e616d652c205f616d6f756e742929207b2061737365745f6e616d65203d3d206e616d65207d290a2020202020207c3e206c6973742e686561642829001640fc64b30010018a6103d87a80008981919822191ba73304530420013304530430014bd701822800a5eb810431919800800992cc004c0d4c108dd5000c52f5bded8c113756608c60866ea8005040198151bab30353042375400c00644b30010018a5eb7bdb18226644b30013371e00a6eb8c11000a26608e004660080080031330040040014108608c002608e0028220dd71821181f9baa3022303f37540086eb8c0c8c0fcdd51811181f9baa004375a6044607e6ea8c088c0fcdd50024528c54cc0f524011b69735f636f6c6c61746572616c5f657175616c203f2046616c73650014a081e22b30013371e6eb8004dca1bb33042303f375400f14a3153303d4911c69735f646174756d5f7461675f636f7272656374203f2046616c73650014a081e2294103c4528207841106082607c6ea80062a660789213665787065637420496e6c696e65446174756d2872657475726e5f646174756d29203d2072657475726e5f6f75747075742e646174756d001640ec6040607a6ea8004c0fcc0f0dd5001454cc0e92412a65787065637420536f6d652872657475726e5f6f757470757429203d2072657475726e5f6f7574707574001640e5036406903681b40da06c8208c0f8c0ecdd500140c9038180e181c9baa302c303937540026078607a607a0046076002606e6eaa6002003375a6074606e6ea800e6054606e6ea800e04680122646644b300130193039375400313259800800c6600200313259800980d981d9baa0018992cc004006330010018acc00566002b30013371e6eb8c100c0f4dd51810181e9baa003375c6080607a6ea8c080c0f4dd5000c4cdc79bae3030303d37546040607a6ea800cdd71818181e9baa3020303d375400314a081d229462a6607692011469735f6e66745f76616c6964203f2046616c73650014a081d22b30013301500f0298a518a9981da4811569735f6d696e745f76616c6964203f2046616c73650014a081d2294103a40d901b40da06d03681b2084303f303c3754003153303a4913365787065637420496e6c696e65446174756d286f75747075745f6461746129203d2073656c665f6f75747075742e646174756d001640e4603c60766ea800e06680ca067033819c0cd040181e981d1baa001818a06e303b303c001301b30383754605660706ea8c0ec004c0dcdd54c0040066eb4c0e8c0dcdd5001cc0a8c0dcdd5001c08d0022068181b001180080098181baa001222598008014530103d87a80008acc004c090006260466606a606c00497ae08cc00400e606e005337000029000a00640c081a0dd7181898171baa0018a998162492265787065637420536f6d652873656c665f6861736829203d2073656c665f68617368001640acb3001301e302c375400914c103d87a80008980e99817981818169baa0044bd7020548992cc004006264b30013020302e375400513259800800c09a264b3001001813c09e04f1332259800800c0a6264b30010018992cc00400605713259800800c5660026074005132598009814181b1baa0048992cc00400605d13259800800c0be05f02f899912cc00400606313259800800c5660026080005132598009817000c4c9660020030348992cc00400606b03581ac4c966002608800700a81b2082375a0030354110608200281f8c0f4dd50014566002605e003159800981e9baa002803c0cd03e40cd03a2074303b375400303240f503281940ca0648208c0f800503c1bad001303d002817a07c303b00140e4606e6ea801205a81a04c9660026050003159800981b9baa002804c0b503845660026052003159800981b9baa002804c0b503840b503420683035375400302c40dd02c81640b205881d8c0e0005036181c00140aa05502a8152072303600140d06eb4004c0d400a04e81b0c0cc00503118179baa002812a058130023032003812409204902440cc60600048170dd600ac0820408178c0b0c0a4dd500bc566002603402d133001375c605860526ea805c0562c813102611191991194c004c8cc004004008896600200314bd7044c8cc88cc00800a60026eacc098c0ccdd5000d2f5c12229800801400644464b3001302c30393754003100289981e181e981d1baa00100240dcb30013371e00c023130293303b374e660766ea4044cc0ecdd48019981d9ba80024bd7025eb822980103d87a800040d880e9019112cc0040062007133035303600133002002303700140d06068004660040046068002818a653001001801d221004004444b30010028800c6600200730350029b94337140026eccc0d0c0c4dd5181a001200640c9375860620069112cc0056600266e1cc02c010c02800e29462a6605e9201526c6973742e6c656e677468287265736f6c7665645f7363726970745f696e7075747329203d3d206c6973742e6c656e677468287265666572656e63655f6e6674735f746f5f6275726e29203f2046616c73650014a081722646644b30015980099b884800000a29462a66064921206861735f6e66745f706f736974696f6e5f6f757470757473203f2046616c73650014a0818a2b3001598009980a80192cc004c098c0d0dd5000c4c8c8cc00400401c896600200314a115980098154c004dd59815981c1baa303b001808400d0134528c4cc008008c0f0005035207233017375c60706eb0c0e0c0d4dd5000a6103d87980008a99819a492765787065637420536f6d652828706f736974696f6e5f6964656e742c205f2929203d20656c656d001640c914a315330324911c69735f706f736974696f6e735f636f7272656374203f2046616c73650014a0818a2b30015980099b8733702601a00266e08c03401920043370400490024528c54cc0c924011b69735f706f736974696f6e735f6d696e746564203f2046616c73650014a0818a2b300132330010010072259800800c528c56600264646530013371491104000de140009800a4011337006e340052007800ae31375c6078007375a6078607a0049112cc004cc0700248c96600266e3c010dd71820801456600266e3c018dd71820800c4cdc399b814800000cdd698209821000c52820768a5040ec608200313301c0092325980099b8f004375c608200515980099b8f005375c608200313370e66e052000003375a6082608400314a081da294103b1820800c52820721bae303b001303b00137586072003133002002303a0018a5040cc81ba29462a6606492011b69735f706f736974696f6e735f6275726e6564203f2046616c73650014a0818a2941031452820628a5040c4601800330013756606a606c606c00f4bd70488a60020050019111981d1ba73303a375200c660746ea400ccc0e8dd400125eb8000501c20303233001001329800800d20009980c001805a00222259800800c52f5bded8c1133037337606ea0008c0e000660020073019002981c800a00640d844b30010018a5eb8226606a646464b3001302730353754003132598009814cc004dd59815181b9baa003807ccc06400530103d879800040491302733039374e660726ea4004cc0e4c0e8c0dcdd500125eb812f5c114c103d87a800040d06e50cdc50039bb330350038a9981a2494365787065637420536f6d65286c696e6561725f706172616d7329203d207472795f657874726163745f6e66745f706f736974696f6e286f75747075742e646174756d29001640cc64b300130153035375400313259800800c66002003132598009814981b9baa0018992cc004c0a8c0e0dd5000c566002603060246eb0c0f0c0e4dd5001c56600266e3e60029000520109bae303c303d3758607860726ea800971848810854657374696e675f008acc004cdc79bae303c303d3758607860726ea8005220135697066733a2f2f516d5268545462557250594577336d4a4747685171515354396b38367631445042695454574a474b444a7356467700898149981d801a5eb822a6606e92013665787065637420696d6167655f76616c7565203d3d206279746561727261792e66726f6d5f737472696e67286e66745f696d61676529001640d91533037491656578706563740a202020206279746561727261792e74616b65286e616d655f76616c75652c206279746561727261792e6c656e677468286e66745f7072656669785f6279746561727261792929203d3d206e66745f7072656669785f627974656172726179001640d9153303749130657870656374206c6973742e6c656e6774682863697036385f706f736974696f6e2e6d6574616461746129203d3d2032001640d91533037491b965787065637420536f6d6528696d61676529203d0a2020202063697036385f706f736974696f6e2e6d657461646174610a2020202020207c3e206c6973742e66696e64280a20202020202020202020666e286d29207b0a2020202020202020202020206c657420286b2c205f29203d206d0a2020202020202020202020206b203d3d206279746561727261792e66726f6d5f737472696e67284022696d61676522290a202020202020202020207d2c0a202020202020202029001640d8660426eb0c0ecc0e0dd5001119b8f375c6078002910105696d616765008a9981b249b765787065637420536f6d65286e616d6529203d0a2020202063697036385f706f736974696f6e2e6d657461646174610a2020202020207c3e206c6973742e66696e64280a20202020202020202020666e286d29207b0a2020202020202020202020206c657420286b2c205f29203d206d0a2020202020202020202020206b203d3d206279746561727261792e66726f6d5f737472696e672840226e616d6522290a202020202020202020207d2c0a202020202020202029001640d4660406eb0c0e8c0dcdd5000919b8f375c60760029101046e616d6500819a02a819c0ce06703340f06072606c6ea80062a6606892013165787065637420496e6c696e65446174756d28696e6c696e655f646174756d29203d206f6e5f636861696e5f646174756d001640cc6030606a6ea8004c0d0004c0d8004cc008008c0dc005034454cc0bd241586578706563740a20202020286c6973742e6c656e677468287265736f6c7665645f7363726970745f696e7075747329203d3d206c6973742e6c656e677468287265666572656e63655f6e6674735f746f5f6275726e29293f001640b833012329800800c00a97ae04004444b30010028800c66002007303400299819181198181baa3033002001400c8188014c0bcc0bc004dd6181700098151baa0013003003300200210130c054c058004c054019149a2a6601292011856616c696461746f722072657475726e65642066616c7365001365640201", "hex")
)));

const validatorAddr = addressFromValidator(NetworkId.Testnet, validatorScript);

async function main() {
    const provider = new Blockfrost({
        network: "cardano-preview",
        projectId: "previewHrSysJDVogoNGDcicS3MoPiKmMv8udMR",
    });

    const mnemonic =
        "oval bracket boss inquiry magic bottom jungle draw ripple mirror despair junk glass grunt minor desert hungry bracket feed hip lecture deal finish naive";
    const entropy = mnemonicToEntropy(mnemonic, wordlist);
    const masterkey = Bip32PrivateKey.fromBip39Entropy(Buffer.from(entropy), "");
    const wallet = await HotWallet.fromMasterkey(masterkey.hex(), provider);

    const blaze = await Blaze.from(provider, wallet);

    // Optional: Print the wallet address
    console.log("Wallet address", wallet.address.toBech32());

    // Optional: Print the wallet balance
    console.log("Wallet balance", (await wallet.getBalance()).toCore());

    // Optional: Print the wallet balance
    console.log("Validator address", validatorAddr.toBech32());

    const scriptRef = await blaze.provider.resolveUnspentOutputs([
        new TransactionInput(TransactionId("79330665ae8479379728a705b8c9101e98494b81559be3c62788e841337d0c13"), 0n)
    ]);

    const collateralDatum = {
        PolicyId: "",
        AssetName: "",
        CollateralAmount: 15_000_000n
    } as CollateralDatum;
    const collateralDatumPlutusData = Data.to(collateralDatum, CollateralDatum);

    const nftPositionDatum = {
        Metadata: [["6E616D65".toLowerCase(), "54455354455253".toLowerCase()], ["696D616765".toLowerCase(), "697066733A2F2F516D5268545462557250594577336D4A4747685171515354396B38367631445042695454574A474B444A73564677".toLowerCase()]],
        Version: 1n,
        Extra: collateralDatum
    };
    const nftPositionDatumPlutusData = Data.to(nftPositionDatum, NftPositionDatum);

    const policyId = PolicyId("8469500b8d58ab5c0905d0d9c38e48c4ef5a27e76b7a9af57bab0fba");
    const assetName = AssetName("54455354455253");

    const assetId = AssetId.fromParts(policyId, assetName);

    const input = new TransactionInput(TransactionId("81f5faca18e0364147a12277ff8ec69c741eb0af66a0f36bc6a4e500dfd68f9c"), 0n);
    const output = new TransactionOutput(wallet.address, new Value(50_000_000n));
    const txInput = new TransactionUnspentOutput(input, output);

    const hashString = blake2b_256(
        HexBlob.fromBytes(
            Buffer.from(txInput.input().toCbor())
        )
    );

    const ident_hash = AssetId.fromParts(policyId, AssetName(hashString));

    const tokenMapper: TokenMap = new Map<AssetId, bigint>();
    const ident = tokenMapper.set(ident_hash, 1n);

    console.log("Buffer: ", blake2b_256(HexBlob.fromBytes(
        Buffer.from(txInput.input().toCbor())
    )));

    const assetNameRef = AssetName((reference_prefix + HexBlob.fromBytes(Buffer.from("Testing_")).toString() + "45027F3A85B2F7F3951384253B1DE06B6BA12973".toLowerCase()).toString());
    const assetNameUser = AssetName((user_nft_prefix + HexBlob.fromBytes(Buffer.from("Testing_")).toString() + "45027F3A85B2F7F3951384253B1DE06B6BA12973".toLowerCase()).toString());

    const refTokenMapper: TokenMap = new Map<AssetId, bigint>();
    const refNftIdent = AssetId.fromParts(policyId, AssetName(assetNameRef))
    refTokenMapper.set(refNftIdent, 0n);

    const userTokenMapper: TokenMap = new Map<AssetId, bigint>();
    const userNftIdent = AssetId.fromParts(policyId, AssetName(assetNameUser))
    userTokenMapper.set(userNftIdent, 1n);

    // build the txOutput
    const referenceTxOutput = new TransactionOutput(validatorAddr, new Value(30_000_000n));
    referenceTxOutput.amount().setMultiasset(ident);
    referenceTxOutput.setDatum(Datum.newInlineData(nftPositionDatumPlutusData));

    const userTxOutput = new TransactionOutput(wallet.address, new Value(30_000_000n));
    userTxOutput.amount().setMultiasset(ident);

    const assetMapper: Map<AssetName, bigint> = new Map<AssetName, bigint>();
    assetMapper.set(assetNameRef, 0n);
    assetMapper.set(assetNameUser, 1n);

    const collateralInlineDatum = Data.to(collateralDatumPlutusData, Datum.newInlineData)
    const nftPositionInlineDatum = Data.to(nftPositionDatumPlutusData, Datum.newInlineData)

    const tx = await blaze
        .newTransaction()
        .addReferenceInput(scriptRef[0])
        .lockLovelace(validatorAddr, 15_000_000n, collateralInlineDatum)
        .addMint(policyId, assetMapper, Data.void())
        .lockAssets(validatorAddr, new Value(5_000_000n, refTokenMapper), nftPositionInlineDatum)
        .payAssets(wallet.address, new Value(5_000_000n, userTokenMapper))
        .provideScript(validatorScript)
        .complete();

    // const tx = await blaze
    //     .newTransaction()
    //     .lockLovelace(
    //         validatorAddr,
    //         5_000_000n,
    //         Data.void()
    //     )
    //     .complete();

    // const signedTx = await blaze.signTransaction(tx);
    // const txId = await blaze.provider.postTransactionToChain(signedTx);
    // console.log("Transaction ID", txId);
}

// Register Stake Credential
async function registerCredential(blaze: Blaze<Blockfrost, HotWallet>, script: Script) {
    const registerTx = await blaze
        .newTransaction()
        .addRegisterStake(Credential.fromCore({
            type: CredentialType.ScriptHash,
            hash: script.hash()
        }))
        .complete();

    const signedTx = await blaze.signTransaction(registerTx);
    const txId = await blaze.provider.postTransactionToChain(signedTx);
    console.log("Transaction Id", txId);
}

main()